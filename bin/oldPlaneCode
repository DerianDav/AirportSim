
		
	/*	else if(curStage == planeStage.LANDING) {
			if(curTile == MapTile.RUNWAYEXITSOUTH && match) {
				xVel = 0;
				yVel = 0.05;
				curStage = planeStage.ONRUNWAY;
				airport.leftRunway(planeNum);
				curDir = Direction.SOUTH;
				instructions.poll();
			}
		}
		else if(curStage == planeStage.TERMINAL && curTile != MapTile.I2) {
			if(ticksSinceLastStage >= 1000 && !airport.i2InUse) {
				System.out.println(planeNum + ": leaving terminal");
				headedToRunway = 0;
				if(curDir == Direction.WEST) {
					curDir = Direction.EAST;
					airport.i2InUse = true;
					inIntersection = true;
					xVel = 0.01;
					yVel = 0;
				}
			}
			if(curTile == MapTile.TERMINALEXITNORTH && match){
				instructions.poll();
				xVel = 0;
				yVel = -0.03;
			}
		}
		else if(curTile == MapTile.STOP) {
			xVel = 0;
			yVel = 0;
		}
		else if(curTile == MapTile.RUNWAYWAIT && !onRunway) {
			if(headedToRunway == 0 && airport.runway0InUse) {
				xVel = 0;
				yVel = 0;
			}
			else {
				airport.runway0InUse = true;
				onRunway = true;
			}
		}
		else if(curTile == MapTile.RUNWAYSTOP) {
			curStage = planeStage.TAKEOFF;
			xVel = 0;
			yVel = 0;
			ticksSinceLastStage = 0;
		}
		else if(curTile == MapTile.TAXIWAYNORTH && match) {
			System.out.println((int) xCord + " " + (int)yCord + " = " + curTile);
			curDir = Direction.NORTH;
			xVel = 0;
			yVel = -0.05;
			instructions.poll();
			
		}
		else if(curTile == MapTile.TAXIWAYSOUTH &&  match){
			curStage = planeStage.TAXING;
			System.out.println((int) xCord + " " + (int)yCord + " = " + curTile);
			curDir = Direction.SOUTH;
			xVel = 0;
			yVel = 0.05;
			instructions.poll();
		}
		else if(curTile == MapTile.TAXIWAYWEST &&  match){
			curStage = planeStage.TAXING;
			System.out.println((int) xCord + " " + (int)yCord + " = " + curTile);
			curDir = Direction.WEST;
			xVel = -0.05;
			yVel = 0;
			instructions.poll();
		}
		else if(curTile == MapTile.I2) {
			if(planeNum == 0) {System.out.println(curStage);}
			if(curStage == planeStage.TERMINAL)
				System.out.println();
			if(airport.i2InUse == false)
				airport.i2InUse = true;
			else if(inIntersection == false){ 
				xVel = 0; 
				yVel = 0;
				return;
			}
			else if(instructions.peek() == MapTile.TAXIWAYWEST) {
				xVel = -0.05;
				yVel = 0;
				curStage = planeStage.TAXING;
				inIntersection = false;
				airport.i2InUse = false;
			}
				
			if(planeNum == 1)
				System.out.println();
			if(instructions.peek() == MapTile.I2) 
				instructions.poll();
			if(instructions.peek() == MapTile.INTERSECTION) {
				instructions.poll();
				curDir = Direction.SOUTH;
				xVel = 0;
				yVel = 0.03;
				inIntersection = true;
			}
			
			else if (inIntersection == false){
				xVel = -0.05;
				yVel = 0;
			}
		}
		else if(match && (curTile == MapTile.TERMINAL1 || curTile == MapTile.TERMINAL2 || curTile == MapTile.TERMINAL3)){
			curStage = planeStage.TAXING;
			System.out.println((int) xCord + " " + (int)yCord + " = " +curTile);
			curDir = Direction.WEST;
			xVel = -0.01;
			yVel = 0;
			instructions.poll();
			inIntersection = false;
			airport.i2InUse = false;
		}
		
		else if(curTile == MapTile.BUILDING){
			curStage = planeStage.TERMINAL;
			ticksSinceLastStage = 0;
			xVel = 0;
			yVel = 0;
		}
	}
	*/
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
			queue1 = new LinkedList<MapTile>();
		queue1.add(MapTile.RUNWAYEXITSOUTH);
		queue1.add(MapTile.TAXIWAYSOUTH);
		queue1.add(MapTile.TAXIWAYWEST);
		queue1.add(MapTile.I2);
		queue1.add(MapTile.INTERSECTION);
		queue2 = new LinkedList<MapTile>(queue1);
		queue3 = new LinkedList<MapTile>(queue1);
		queue1.add(MapTile.TERMINAL1);
		queue1.add(MapTile.TERMINALEXITNORTH);
		queue1.add(MapTile.TAXIWAYWEST);
		queue1.add(MapTile.TAXIWAYNORTH);
		terminalDir0.add(queue1);
		queue2.add(MapTile.TERMINAL2);
		queue2.add(MapTile.TERMINALEXITNORTH);
		queue2.add(MapTile.TAXIWAYWEST);
		queue1.add(MapTile.TAXIWAYNORTH);
		terminalDir0.add(queue2);
		queue3.add(MapTile.TERMINAL3);
		queue3.add(MapTile.TERMINALEXITNORTH);
		queue3.add(MapTile.TAXIWAYWEST);
		queue1.add(MapTile.TAXIWAYNORTH);
		terminalDir0.add(queue3);